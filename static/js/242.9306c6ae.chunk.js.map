{"version":3,"file":"static/js/242.9306c6ae.chunk.js","mappings":"4MAOA,MAwCA,EAxCgBA,KAEZ,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,MACbC,EAASC,IAAcC,EAAAA,EAAAA,aACvBC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,OAC5BG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,GAiB3C,OAfAK,EAAAA,EAAAA,WAAU,KACND,GAAa,GACME,WACf,IACI,MAAMC,QAAaC,EAAAA,EAAAA,IAAaZ,GAChCG,EAAWQ,EAAKE,QACpB,CAAE,MAAOR,GACLC,EAASD,EAAMS,QACnB,CAAC,QACGN,GAAa,EACjB,GAEJO,IACD,CAACf,KAGAgB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACKV,IAAaW,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACpBd,IAASW,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,yBAAuBZ,EAAMS,YAC1CI,EAAAA,EAAAA,KAAA,MAAAD,SACMf,GAAWA,EAAQkB,OAAS,EAAKlB,EAAQmB,IAAIC,IAC3CN,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACID,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,WAASK,EAAOC,WACpBL,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAOE,YAFNF,EAAOG,MAIfP,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kD,mFCrCzB,MAAMS,EAAU,mCAChBC,EAAAA,EAAMC,SAASC,QAAU,+BAElB,MAAMC,EAAqBpB,gBACPiB,EAAAA,EAAMI,IAAI,8BAADC,OAA+BN,KAC/Cf,KAAKE,QAGZoB,EAAmBvB,gBACLiB,EAAAA,EAAMI,IAAI,wBAADC,OAAyBN,EAAO,WAAAM,OAAUE,KAC1DvB,KAAKE,QAGZsB,EAAiBzB,gBACHiB,EAAAA,EAAMI,IAAI,SAADC,OAAUhC,EAAO,aAAAgC,OAAYN,KAC7Cf,KAGPyB,EAAY1B,gBACEiB,EAAAA,EAAMI,IAAI,SAADC,OAAUhC,EAAO,qBAAAgC,OAAoBN,KACrDf,KAGPC,EAAeF,gBACDiB,EAAAA,EAAMI,IAAI,SAADC,OAAUhC,EAAO,qBAAAgC,OAAoBN,KACrDf,I","sources":["components/Reviews/Reviews.jsx","api/movieFetch.js"],"sourcesContent":["import { fetchReviews } from \"api/movieFetch\";\nimport Loader from \"components/Loader/Loader\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n\n\nconst Reviews = () => {\n\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState();\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        setIsLoading(true);\n        const reviewData = async () => {\n            try {\n                const data = await fetchReviews(movieId);\n                setReviews(data.results);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            };\n        };\n        reviewData();\n    }, [movieId]);\n\n    return (\n        <div>\n            {isLoading && <Loader />}\n            {error && <p>Something went wrong: {error.message}</p>}\n            <ul>\n                {(reviews && reviews.length > 0) ? reviews.map(review => (\n                    <li key={review.id}>\n                        <h3>Author: {review.author}</h3>\n                        <p>{review.content}</p>\n                    </li>\n                )) : <h3>We don't have any reviews for this movie</h3>}\n            </ul>\n        </div>\n    )\n\n};\n\n\nexport default Reviews;","import axios from 'axios';\n\nconst API_KEY = '162c66808f40d9926cd1cd1521481975';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchPopularMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nexport const fetchQueryMovies = async (query) => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&query=${query}`);\n    return response.data.results;\n};\n\nexport const fetchMovieById = async (movieId) => {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return response.data;\n};\n\nexport const fetchCast = async (movieId) => {\n    const response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n    return response.data;\n};\n\nexport const fetchReviews = async (movieId) => {\n    const response = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return response.data;\n};"],"names":["Reviews","movieId","useParams","reviews","setReviews","useState","error","setError","isLoading","setIsLoading","useEffect","async","data","fetchReviews","results","message","reviewData","_jsxs","children","_jsx","Loader","length","map","review","author","content","id","API_KEY","axios","defaults","baseURL","fetchPopularMovies","get","concat","fetchQueryMovies","query","fetchMovieById","fetchCast"],"sourceRoot":""}