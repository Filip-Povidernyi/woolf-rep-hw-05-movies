{"version":3,"file":"static/js/488.e8e01517.chunk.js","mappings":"4MAEA,MAoBA,EApBmBA,IAAwB,IAAvB,cAAEC,GAAeD,EAEjC,MAAOE,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAEnC,OACIC,EAAAA,EAAAA,MAAA,QAAMC,SAAUL,EAAcM,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,QACLC,MAAOZ,EACPa,SAAWC,GAASb,EAASa,EAAIC,OAAOH,UAE5CN,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,SAAC,eCiClC,EA1CeW,KAEX,MAAOC,EAAQC,IAAahB,EAAAA,EAAAA,UAAS,KAC9BiB,EAAOC,IAAYlB,EAAAA,EAAAA,UAAS,OAC5BmB,EAAWC,IAAgBpB,EAAAA,EAAAA,WAAS,IACpCF,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IA2BnC,OAfAqB,EAAAA,EAAAA,WAAU,KACND,GAAa,GACIE,WACb,IACI,MAAMC,QAAaC,EAAAA,EAAAA,IAAiB1B,GACpCkB,EAAUO,EACd,CAAE,MAAON,GACLC,EAASD,EACb,CAAC,QACGG,GAAa,EACjB,GAEJK,IACD,CAAC3B,KAGAG,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAACsB,EAAU,CAAC7B,cA3BEyB,UAClBV,EAAIe,iBACJ,MAAM7B,EAAQc,EAAIgB,cAAc9B,MAAMY,MACjB,KAAjBZ,EAAM+B,OAIV9B,EAASD,GAHLgC,MAAM,kCAwBLX,IAAaf,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,IACpBd,IAAShB,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,yBAAuBc,EAAMe,WACzCjB,EAAOkB,OAAS,IAAK7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CAACC,OAAQpB,O,uDC3CrD,MAUA,EAVkBnB,IAAe,IAAd,KAAE2B,GAAM3B,EACvB,MAAMwC,GAAWC,EAAAA,EAAAA,MACjB,OACIjC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAACkC,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAajB,EAAKkB,IAAMC,MAAO,CAAEC,KAAMP,GAAWjC,SAAEoB,EAAKqB,WCS7E,EAZkBhD,IAAiB,IAAhB,OAAEuC,GAAQvC,EACzB,OACIQ,EAAAA,EAAAA,KAAA,MAAAD,SACKgC,EAAOU,IAAIC,IACR1C,EAAAA,EAAAA,KAAC2C,EAAS,CAAgBxB,KAAMuB,GAAhBA,EAAML,O,mFCLtC,MAAMO,EAAU,mCAChBC,EAAAA,EAAMC,SAASC,QAAU,+BAElB,MAAMC,EAAqB9B,gBACP2B,EAAAA,EAAMI,IAAI,8BAADb,OAA+BQ,KAC/CzB,KAAK+B,QAGZ9B,EAAmBF,gBACL2B,EAAAA,EAAMI,IAAI,wBAADb,OAAyBQ,EAAO,WAAAR,OAAU1C,KAC1DyB,KAAK+B,QAGZC,EAAiBjC,gBACH2B,EAAAA,EAAMI,IAAI,SAADb,OAAUgB,EAAO,aAAAhB,OAAYQ,KAC7CzB,KAGPkC,EAAYnC,gBACE2B,EAAAA,EAAMI,IAAI,SAADb,OAAUgB,EAAO,qBAAAhB,OAAoBQ,KACrDzB,KAGPmC,EAAepC,gBACD2B,EAAAA,EAAMI,IAAI,SAADb,OAAUgB,EAAO,qBAAAhB,OAAoBQ,KACrDzB,I","sources":["components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.jsx","api/movieFetch.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst SearchForm = ({ submitHandler }) => {\n\n    const [query, setQuery] = useState('');\n    \n    return (\n        <form onSubmit={submitHandler}>\n            <input\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movies\"\n                name=\"query\"\n                value={query}\n                onChange={(evt) => (setQuery(evt.target.value))}\n            />\n            <button type=\"submit\">Search</button>\n        </form>\n    )\n};\n\nexport default SearchForm;","import { fetchQueryMovies } from \"api/movieFetch\";\nimport Loader from \"components/Loader/Loader\";\nimport MovieList from \"components/MovieList/MovieList\";\nimport SearchForm from \"components/SearchForm/SearchForm\";\nimport { useEffect, useState } from \"react\";\n\n\n\nconst Movies = () => {\n\n    const [search, setSearch] = useState([]);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [query, setQuery] = useState('');\n\n    const submitHandler = async (evt) => {\n        evt.preventDefault();\n        const query = evt.currentTarget.query.value;\n        if (query.trim() === '') {\n            alert('Please enter a search query');\n            return;\n        };\n        setQuery(query);\n    };\n\n    useEffect(() => {\n        setIsLoading(true);\n        const response = async () => {\n            try {\n                const data = await fetchQueryMovies(query);\n                setSearch(data);\n            } catch (error) {\n                setError(error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        response();\n    }, [query]);\n\n    return (\n        <div>\n            <SearchForm submitHandler={submitHandler} />\n            {isLoading && <Loader />}\n            {error && <p>Something went wrong: {error.message}</p>}\n            {search.length > 0 && <MovieList movies={search} />}\n        </div>\n    )\n};\n\nexport default Movies;","import { Link, useLocation } from \"react-router-dom\";\n\nconst MovieItem = ({ data }) => {\n    const location = useLocation();\n    return (\n        <li>\n            <Link to={`/movies/${data.id}`} state={{ from: location }}>{data.title}</Link>\n        </li>\n    )\n};\n\n\nexport default MovieItem;","import MovieItem from \"components/MovieItem/MovieItem\";\n\n\nconst MovieList = ({ movies }) => {\n    return (\n        <ul>\n            {movies.map(movie => (\n                <MovieItem key={movie.id} data={movie} />\n            ))}\n        </ul>\n    )\n};\n\n\n\nexport default MovieList;","import axios from 'axios';\n\nconst API_KEY = '162c66808f40d9926cd1cd1521481975';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchPopularMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nexport const fetchQueryMovies = async (query) => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&query=${query}`);\n    return response.data.results;\n};\n\nexport const fetchMovieById = async (movieId) => {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return response.data;\n};\n\nexport const fetchCast = async (movieId) => {\n    const response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n    return response.data;\n};\n\nexport const fetchReviews = async (movieId) => {\n    const response = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return response.data;\n};"],"names":["_ref","submitHandler","query","setQuery","useState","_jsxs","onSubmit","children","_jsx","type","autoComplete","autoFocus","placeholder","name","value","onChange","evt","target","Movies","search","setSearch","error","setError","isLoading","setIsLoading","useEffect","async","data","fetchQueryMovies","response","SearchForm","preventDefault","currentTarget","trim","alert","Loader","message","length","MovieList","movies","location","useLocation","Link","to","concat","id","state","from","title","map","movie","MovieItem","API_KEY","axios","defaults","baseURL","fetchPopularMovies","get","results","fetchMovieById","movieId","fetchCast","fetchReviews"],"sourceRoot":""}